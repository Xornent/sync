
                                      sync
                                      ====

1)  introduction
----------------

    preparing for version 7.x

    [UNDER CONSTRUCTION]
    do not fork or use the software until i finish this section.


2)  update logs
---------------

    1.0  ...................................................  (mar. 31st, 2024)

    designed a simple script to sync my mediawiki data (the images folder and 
    mysql database) across multiple devices.

    sync-wiki utility: upload local filesystem to the remote repository oss, or 
    sync the remote endpoint to the local filesystem. this script is specialized
    for database sync and automatically upload one mysql database to the cloud 
    .sql file

    configuration: configurations are located in config.py file
    - oss-bucket: the remote oss bucket name.
    - oss-entry, oss-credential, oss-id: authentication information for oss.
    - mysql-user, mysql-password: authentication information for mysql database.
    - wiki-dbname: the mysql database to sync.
    - wiki-images: local wiki images filesystem. 

    2.0  ....................................................  (apr. 3rd, 2024)

    updated the sync utility to v2. adding features:

    -   adding a .ignore file to the directory will automatically ignore all 
        file contents in the directory (and sub-directories). and i decide not 
        to sync the temp, archive, lockdir and thumb directories since they are 
        auto-generated.

    -   the fact that they do not auto-generate on my fedora is actually a write
        protection i have not figured out why ...
    
    3.0  ....................................................  (apr. 4th, 2024)

    update the sync utility to v3. this version is for general-purpose non-sql 
    data, only focused on the file directory sync with support of .ignore 
    configuration to the remote aliyun oss system.

    it is suited to uploading huge amount of files, making a dirty assumption 
    on the hash operation: for files < 10 MiB, i calculate the hash as default, 
    but for files bigger, i only calculate the first KiB of data for each 1 MiB 
    block (1023/1024 of the data are not taken into consideration!) this may 
    cause the loss of detection of changed files, but i assume that for huge 
    files, non- frame shift mutations are rare, ones edits to the file may most 
    likely disrupts the frames, and thus resulting in changed hash. 

    4.0  ....................................................  (apr. 7th, 2024)

    update utility v4. i add logic to recognize file moving operation and file 
    copies (based on the exact hash code to identify each file(s) unchanged), 
    and try to move or copy the file only at local (in case of fetch) and only 
    at remote (in case of push). this minimize the need of download/upload band 
    width cost. feel free to move your files before sync. (this will not cost 
    you any money).

    since the hash code is not strict (they may be more possible for identical 
    hash code for two files), several things will happen:

    -   you have changed the content of the file, but the system do not 
        recognize it, thus not uploading your new version during sync. 
        (major case).

    -   you moved/copied and changed the one file, but do not enough change to 
        make the hash code vary. this may cause the system to copy/move the 
        original file with your changes lost. (esp. dangerous when you fetch, 
        the system won't alarm you when replacing the local file with 'new' 
        remote files.), this causes a permanent loss to your data.

    for huge files, there is a natural condition when the hash code do not 
    change, i turned on move/copy alarm by default (can be turned off with -y), 
    but it is more suitable to look at the diff result manually. 

    5.0  ....................................................  (apr. 8th, 2024)

    > [!!] note: v4's fetch is FAULTY. do not use v4 of code

    -   configs can now be given through command-line. and ossutil.config is 
        generated automatically through information given in the console or 
        config.py. (console overwrite the config file settings).

    -   fix copy and move bugs in fetch(). 

    6.0  ...................................................  (apr. 18th, 2024)

    -   minor change, accelerate the hash code calculation by skipping the files 
        with modified time and size unchanged. 

    7.0  ....................................................  (mar. 3rd, 2024)

    -   a rewrite, and major change in structure to aim as a more general-
        purpose utility program. highly modular to be extended.
    
    -   supports merge conflicts.

    -   prone to be instable. do not use this version before i stablize the 
        interface and write the introduction section.