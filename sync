#!usr/bin/python3
import argparse
import os
import copy

from shared.configuration import get_tasks, get_interfaces, get_providers, \
                                 load_task, load_provider, load_interface, \
                                 remove_empty
from shared.ansi import error, fill_blank, fore_purple, ansi_reset, clear

def parseArguments(app):
    
    desc = 'sync between local and remote file systems. [v8, 2024.05.08]'
    desc += '\n' + 'application installed in: {0}'.format(app)
    desc += '\n' + 'registered tasks: {0}'.format(', '.join(get_tasks(app)))
    parser = argparse.ArgumentParser(description = desc, 
                                     formatter_class = argparse.RawTextHelpFormatter)
    
    all_yes = parser.add_argument('-y', action = 'store_true', dest = 'y',
                                  help = 'assume yes for all queries.')
    
    subparsers = parser.add_subparsers(dest = 'command')

    parser_add = subparsers.add_parser('add', 
        help = 'add and configure a sync task')
    
    add_name = parser_add.add_argument('add-name', help = 'the name of the task')
    add_task = parser_add.add_argument('add-task', help = 'type of the sync task, e.g. filesystem')
    
    parser_remove = subparsers.add_parser('remove', 
        help = 'remove a sync task')
    
    rm_name = parser_remove.add_argument('remove-name', help = 'the name of the task')

    parser_conf = subparsers.add_parser('config', 
        help = 'show or modify the task configuration')
    
    conf_name = parser_conf.add_argument('conf-name', help = 'the name of the task to configure')

    parser_list = subparsers.add_parser('list', 
        help = 'list configured tasks')
    
    parser_push = subparsers.add_parser('push', 
        help = 'perform push for the tasks')
    
    push_task = parser_push.add_argument('tasks', nargs = '*', type = str,
        help = 'list of tasks you would like to push')

    parser_fetc = subparsers.add_parser('fetch', 
        help = 'perform fetch for all tasks')
    
    fetch_task = parser_fetc.add_argument('tasks', nargs = '*', type = str,
        help = 'list of tasks you would like to fetch')

    parser_diff = subparsers.add_parser('diff', 
        help = 'show the difference between local and remote for all the tasks')
    
    diff_task = parser_diff.add_argument('tasks', nargs = '*', type = str,
        help = 'list of tasks to show diff info')
    
    available_confs = []
    registered_confs = []
    for task in get_tasks(app):
        task_m = load_task(app, task)

        for intf in task_m.get_required_interfaces(app):
            if intf in registered_confs: continue
            available_confs += [parser_conf.add_argument(
                '-' + intf, dest = intf, type = str, default = '<not-set>',
                help = 'provider for the interface ' + intf.replace('-provider', '') 
                       + ' [{0}]'.format(task)
            )]

            parser_add.add_argument(
                '-' + intf, dest = intf, type = str, default = '<not-set>',
                help = 'provider for the interface ' + intf.replace('-provider', '') 
                       + ' [{0}]'.format(task)
            )
            registered_confs += [intf]

        for intf in get_interfaces(app, task):
            intf_m = load_interface(app, intf)
            
            for prov in get_providers(app, intf):
                pargs = intf_m.get_required_args(app, prov)
                for parg in pargs:
                    if parg in registered_confs: continue
                    available_confs += [parser_conf.add_argument(
                        '-' + parg, dest = parg, type = str, default = '<not-set>',
                        help = '[{0}/{1}]'.format(intf, prov)
                    )]

                    parser_add.add_argument(
                        '-' + parg, dest = parg, type = str, default = '<not-set>',
                        help = '[{0}/{1}]'.format(intf, prov)
                    )

                    registered_confs += [parg]
    

    args = parser.parse_args()
    return args

def save_config(app, confs: dict):
    if os.path.exists(app + '/conf/targets'):
        os.remove(app + '/conf/targets')
    
    lines = []
    with open(app + '/conf/targets', 'x') as fp:
        for name in confs.keys():
            lines += ['\n{0}\t{1}'.format(name, confs[name]['_task'])]
        
            for key in confs[name].keys():
                if key.startswith('_'): continue
                if key == 'app': continue
                if key.endswith('-provider'): 
                    lines += ['\n\tinterface\t{0}\t{1}'.format(
                        key.replace('-provider', ''), confs[name][key]
                    )]
                    continue
                lines += ['\n\t{0}\t{1}'.format(key, confs[name][key])]

            lines += ['\n']

        fp.writelines(lines)

def check_params(app, task, kwargs):
    
    task_m = load_task(app, task)
    for intf in task_m.get_required_interfaces(app):
        if not intf in kwargs.keys():
            error('you need to specify the provider for interface {0} of task {1}. via `config {2}`'
                  .format(intf.replace('-provider', ''), task, '-' + intf))
            
        if kwargs[intf] == '<not-set>':
            error('you need to specify the provider for interface {0} of task {1}. via `config {2}`'
                  .format(intf.replace('-provider', ''), task, '-' + intf))

    reqs = task_m.get_required_args(app, kwargs)
    for reqargs in reqs:
        if not reqargs in kwargs.keys():
            error('the argument {0} of task {1} is required. via `config {2}`'
                  .format(reqargs, task, '-' + reqargs))
            
        if kwargs[reqargs] == '<not-set>':
            error('the argument {0} of task {1} is required. via `config {2}`'
                  .format(reqargs, task, '-' + reqargs))

    return task_m.init(app, kwargs, kwargs)

# -----------------------------------------------------------------------------

if __name__ == "__main__":
    
    app = os.path.split(os.path.realpath(__file__))[0].replace('\\', '/')
    args = parseArguments(app)
    
    confs = {}

    if os.path.exists(app + '/conf/targets'):

        current_name = ''
        for line in open(app + '/conf/targets', 'r'):
            line = line.replace('\r', '').replace('\n', '')
            if line == '': continue
            if line.startswith('#'): continue

            if line.startswith('\t'):
                splits = remove_empty(line.split('\t'))
                key = splits[0]; val = splits[1]
                if key == 'interface':
                    confs[current_name][val + '-provider'] = splits[2]
                else: confs[current_name][key] = val
                
            else:
                splits = remove_empty(line.split('\t'))
                name = splits[0]
                task = splits[1]
                current_name = name
                confs[name] = {
                    'app': app,
                    '_task': task
                }

    if args.command == 'add':
        name = getattr(args, 'add-name')
        task = getattr(args, 'add-task')

        if name in confs.keys():
            error('task `{0}` already exists.'.format(name))
        
        kwargs = {
            'app': app,
            '_task': task,
            '_name': name
        }

        task_m = load_task(app, task)

        for intf in task_m.get_required_interfaces(app):
            if not hasattr(args, intf):
                error('you need to specify the provider for interface {0} of task {1}. via {2}'
                      .format(intf.replace('-provider', ''), task, '-' + intf))
            
            if getattr(args, intf) == '<not-set>':
                error('you need to specify the provider for interface {0} of task {1}. via {2}'
                      .format(intf.replace('-provider', ''), task, '-' + intf))

            kwargs[intf] = getattr(args, intf)

        reqs = task_m.get_required_args(app, kwargs)
        for reqargs in reqs:
            if not hasattr(args, reqargs):
                error('the argument {0} of task {1} is required. via {2}'
                      .format(reqargs, task, '-' + reqargs))
            
            if getattr(args, reqargs) == '<not-set>':
                error('the argument {0} of task {1} is required. via {2}'
                      .format(reqargs, task, '-' + reqargs))

            kwargs[reqargs] = getattr(args, reqargs)
        
        func = task_m.init(app, kwargs, kwargs)
        kwargs['_call'] = func
        confs[name] = kwargs
        save_config(app, confs)

    elif args.command == 'config':
        name = getattr(args, 'conf-name')
        task = confs[name]['_task']

        kwargs = {
            'app': app,
            '_task': task,
            '_name': name
        }

        task_m = load_task(app, task)

        for intf in task_m.get_required_interfaces(app):
            if not hasattr(args, intf):
                error('you need to specify the provider for interface {0} of task {1}. via {2}'
                      .format(intf.replace('-provider', ''), task, '-' + intf))
            
            if getattr(args, intf) == '<not-set>':
                error('you need to specify the provider for interface {0} of task {1}. via {2}'
                      .format(intf.replace('-provider', ''), task, '-' + intf))

            kwargs[intf] = getattr(args, intf)

        reqs = task_m.get_required_args(app, kwargs)
        for reqargs in reqs:
            if not hasattr(args, reqargs):
                error('the argument {0} of task {1} is required. via {2}'
                      .format(reqargs, task, '-' + reqargs))
            
            if getattr(args, reqargs) == '<not-set>':
                error('the argument {0} of task {1} is required. via {2}'
                      .format(reqargs, task, '-' + reqargs))

            kwargs[reqargs] = getattr(args, reqargs)
        
        func = task_m.init(app, kwargs, kwargs)
        kwargs['_call'] = func
        confs[name] = kwargs
        save_config(app, confs)
    
    elif args.command == 'remove':
        name = getattr(args, 'remove-name')
        confs.pop(name)
        save_config(app, confs)
    
    elif args.command == 'list':
        for name in confs.keys():
            fill_blank(30, name)
            fill_blank(20, confs[name]['_task'])
            print('')
    
    elif args.command == 'push' or \
         args.command == 'fetch' or \
         args.command == 'diff':
        
        tasks = confs.keys()
        if args.tasks: tasks = args.tasks

        for x in tasks:
            if not x in confs.keys():
                error('the given task `{0}` is not valid'.format(x))

        for name in tasks:

            clear() # clear the screen

            print('Operating task ', end = '')
            fore_purple()
            print(name)
            ansi_reset()
            print('')

            kwargs = copy.deepcopy(confs[name])
            kwargs['y'] = args.y
            kwargs['_name'] = name

            call = check_params(app, confs[name]['_task'], kwargs)
            call[args.command]()

            print('')
            fore_purple()
            input('##################### Press <enter> to enter the next task #####################')
            ansi_reset()

        clear()

    else:
        error('invalid arguments. type `sync.py [command] -h` for help.')